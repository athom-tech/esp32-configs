substitutions:
  name: "athom-garage-door"
  friendly_name: "Athom Garage Door"
  room: ""
  device_description: "athom esp32-c3 garage door opener"
  project_name: "Athom Technology.Garage Door Opener"
  project_version: "v2.0.1"
  dns_domain: ""
  timezone: ""
  wifi_fast_connect: "false"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  area: "${room}"
  name_add_mac_suffix: true
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_build.mcu: esp32c3
    board_build.variant: esp32c3
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  flash_size: 4MB
  variant: ESP32C3
  framework:
    type: arduino
    version: recommended

api:

ota:

logger:

mdns:
  disabled: false

web_server:
  port: 80

wifi:
  ap: {}
  fast_connect: "${wifi_fast_connect}"
  domain: "${dns_domain}"

captive_portal:

dashboard_import:
  package_import_url: github://athom-tech/esp32-configs/athom-garage-door.yaml

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true

  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic
    internal: true

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Strength"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic

binary_sensor:
  - platform: status
    name: "Status"

  - platform: gpio
    name: "Contact"
    disabled_by_default: true
    device_class: garage_door
    id: contact
    pin:
      number: GPIO18
      inverted: true
    filters:
      - delayed_on: 20ms

  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    name: "Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
          - ON for at most 1s
          - OFF for at least 0.2s
        then:
          - switch.turn_on: relay
      - timing:
          - ON for at least 4s
        then:
          - button.press: Reset

button:
  - platform: restart
    name: "Restart"
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: config

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: config

switch:
  - platform: gpio
    pin: GPIO7
    name: "Relay"
    id: relay
    disabled_by_default: true
    on_turn_on:
      - light.turn_on: wifi_led
      - delay: 1s
      - switch.turn_off: relay
      - light.turn_off: wifi_led

light:
  - platform: status_led
    name: "Status LED"
    id: wifi_led
    disabled_by_default: true
    pin: GPIO4

cover:
  - platform: template
    device_class: garage
    name: "Garage Door"
    lambda: "return id(contact).state ? COVER_OPEN : COVER_CLOSED;"
    open_action:
      then:
       - if:
          condition:
            lambda: 'return !id(contact).state;'
          then:
              - switch.turn_on: relay
    stop_action:
      - switch.turn_on: relay
    close_action:
      then:
       - if:
          condition:
            lambda: 'return id(contact).state;'
          then:
            - switch.turn_on: relay

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: diagnostic
    ssid:
      name: "Connected SSID"
      entity_category: diagnostic
    mac_address:
      name: "Mac Address"
      entity_category: diagnostic

  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: diagnostic
    device_class: timestamp

  - platform: template
    name: "Uptime"
    entity_category: diagnostic
    lambda: |-
      int seconds = (id(uptime_sensor).state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
      if ( days > 3650 ) {
        return { "Starting up" };
      } else if ( days ) {
        return { (String(days) +"d " + String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( hours ) {
        return { (String(hours) +"h " + String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else if ( minutes ) {
        return { (String(minutes) +"m "+ String(seconds) +"s").c_str() };
      } else {
        return { (String(seconds) +"s").c_str() };
      }
    icon: mdi:clock-start

time:
  - platform: sntp
    id: sntp_time
    timezone: "${timezone}"
    update_interval: 360min    
    on_time_sync:
      then:
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
