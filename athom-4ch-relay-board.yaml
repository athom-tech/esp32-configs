substitutions:
  name: "athom-4ch-relay-board"
  friendly_name: "Athom 4CH Relay Board"
  room: ""
  device_description: "athom esp32 4ch relay board"
  project_name: "Athom Technology.ESP32 4CH Relay Board"
  project_version: "v2.0.5"
  update_interval: 60s
  # Define a domain for this device to use. i.e. iot.home.lan (so device will appear as athom-smart-plug-v2.iot.home.lan in DNS/DHCP logs)
  dns_domain: ".local"
  # Set timezone of the smart plug. Useful if the plug is in a location different to the HA server. Can be entered in unix Country/Area format (i.e. "Australia/Sydney")
  timezone: ""
  # Set the duration between the sntp service polling ntp.org servers for an update
  sntp_update_interval: 6h
  # Network time servers for your region, enter from lowest to highest priority. To use local servers update as per zones or countries at: https://www.ntppool.org/zone/@
  sntp_server_1: "0.pool.ntp.org"
  sntp_server_2: "1.pool.ntp.org"
  sntp_server_3: "2.pool.ntp.org"  
  # Enables faster network connections, with last connected SSID being connected to and no full scan for SSID being undertaken
  wifi_fast_connect: "false"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "DEBUG"
  # Enable or disable the use of IPv6 networking on the device
  ipv6_enable: "false"
  relay1_restore_mode: RESTORE_DEFAULT_OFF
  relay2_restore_mode: RESTORE_DEFAULT_OFF
  relay3_restore_mode: RESTORE_DEFAULT_OFF
  relay4_restore_mode: RESTORE_DEFAULT_OFF

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: true
  min_version: 2025.7.0
  project:
    name: "${project_name}"
    version: "${project_version}"
  platformio_options:
    board_build.flash_mode: dio

esp32:
  board: esp32dev
  flash_size: 4MB
  framework:
    type: esp-idf
    version: recommended

preferences:
  flash_write_interval: 5min

# Enable logging
logger:
  baud_rate: 115200
  level: ${log_level}

mdns:
  disabled: false

web_server:
  port: 80

# Enable Home Assistant API
api:

ota:
  - platform: esphome

network:
  enable_ipv6: ${ipv6_enable}

wifi:
  # This spawns an AP with the device name and mac address with no password.
  ap: {}
  # Allow rapid re-connection to previously connect WiFi SSID, skipping scan of all SSID
  fast_connect: "${wifi_fast_connect}"
  # Define dns domain / suffix to add to hostname
  domain: "${dns_domain}"

captive_portal:

improv_serial:

esp32_improv:
  authorizer: none

dashboard_import:
  package_import_url: github://athom-tech/esp32-configs/athom-4ch-relay-board.yaml

# esp32_ble_tracker:
#   scan_parameters:
#     interval: 1100ms
#     window: 1100ms
#     active: true

# bluetooth_proxy:
#   active: true

remote_receiver:
  pin: GPIO17
  dump: rc_switch
  id: "rc_switch_receiver"

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: "diagnostic"

  - platform: gpio
    pin:
      number: GPIO36
      mode:
        input: true
      inverted: true
    name: "Power Button1"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay1
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset
  - platform: gpio
    pin:
      number: GPIO39
      mode:
        input: true
      inverted: true
    name: "Power Button2"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay2
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset
  - platform: gpio
    pin:
      number: GPIO34
      mode:
        input: true
      inverted: true
    name: "Power Button3"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay3
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset
  - platform: gpio
    pin:
      number: GPIO35
      mode:
        input: true
      inverted: true
    name: "Power Button4"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at most 1s
        - OFF for at least 0.2s
        then:
          - switch.toggle: relay4
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    type:
      timestamp
    entity_category: "diagnostic"

  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: "${update_interval}"
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "Signal %"
    entity_category: "diagnostic"
    device_class: ""

button:
  - platform: restart
    name: "Restart"
    entity_category: "config"

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    entity_category: "config"

  - platform: safe_mode
    name: "Safe Mode"
    internal: false
    entity_category: "config"

switch:
  # Relay
  - platform: gpio
    name: "Relay1"
    pin: GPIO27
    id: relay1
    restore_mode: ${relay1_restore_mode}

  - platform: gpio
    name: "Relay2"
    pin: GPIO14
    id: relay2
    restore_mode: ${relay2_restore_mode}

  - platform: gpio
    name: "Relay3"
    pin: GPIO12
    id: relay3
    restore_mode: ${relay3_restore_mode}

  - platform: gpio
    name: "Relay4"
    pin: GPIO13
    id: relay4
    restore_mode: ${relay4_restore_mode}

light:
  - platform: status_led
    name: "Status LED"
    disabled_by_default: true
    pin: GPIO15

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
      entity_category: "diagnostic"
    ssid:
      name: "Connected SSID"
      entity_category: "diagnostic"
    mac_address:
      name: "Mac Address"
      entity_category: "diagnostic"

  #  Creates a sensor showing when the device was last restarted
  - platform: template
    name: 'Last Restart'
    id: device_last_restart
    icon: mdi:clock
    entity_category: "diagnostic"
#    device_class: timestamp

time:
  - platform: sntp
    id: sntp_time
  # Define the timezone of the device
    timezone: "${timezone}"
  # Change sync interval from default 5min to 6 hours (or as set in substitutions)
    update_interval: ${sntp_update_interval}
  # Set specific sntp servers to use
    servers:
      - "${sntp_server_1}"
      - "${sntp_server_2}"
      - "${sntp_server_3}"
  # Publish the time the device was last restarted
    on_time_sync:
      then:
        # Update last restart time, but only once.
        - if:
            condition:
              lambda: 'return id(device_last_restart).state == "";'
            then:
              - text_sensor.template.publish:
                  id: device_last_restart
                  state: !lambda 'return id(sntp_time).now().strftime("%a %d %b %Y - %I:%M:%S %p");'
